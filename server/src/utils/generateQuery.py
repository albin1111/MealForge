import os

import google.generativeai as genai

model = genai.GenerativeModel("gemini-1.5-flash")
genai.configure(api_key=os.getenv("AI_API_KEY"))

def generateQuery(ingredients, generated_text, server_for, height, weight, age, gender):
    prompt = f"""
      Create 5 new, unique, worldwide recipes that incorporate the following ingredients provided by the user:
      - Ingredients: {', '.join(ingredients)}
      - Initial serving size: {server_for} servings
      - User details: Height={height}cm, Weight={weight}kg, Age={age}, Gender={gender}

      Use the base recipe generated by NLP ("{generated_text}") as a starting point, but modify it if necessary so that it fully aligns with the user-provided ingredients. If the generated recipe does not match the user input, create a modified version.

      To prevent food waste:
      - Adjust the recipe's serving size based on an average person's daily calorie intake (~2000 kcal/day) to ensure the total portion is realistic.
      - If the user-provided ingredient quantities exceed a reasonable serving size, increase the number of servings accordingly.
      - Include a "Leftover Recommendations" section in each recipe, suggesting how to store, repurpose, or preserve any excess food.

      Additionally, precisely calculate the nutrient values for each recipe based on the ingredients provided. For each ingredient, use standard nutritional data (e.g., from USDA or similar databases) to determine its nutrient content per unit measurement. Multiply these values by the quantity specified in the recipe, sum the contributions from all ingredients, and then divide by the final adjusted number of servings. At a minimum, calculate the following nutrients per serving:
      - Calories (kcal)
      - Protein (g)
      - Carbohydrates (g)
      - Fats (g)
      Express each nutrient value with the appropriate units (e.g., "250 kcal", "20g protein").

      The output must be in valid JSON format exactly matching the following structure (output only the JSON array and nothing else):

      [
        {{
          "name": "Recipe title, max 250 characters (e.g., Spaghetti Carbonara, Chicken Adobo).",
          "ingredients": [
            {{
              "name": "Exact name of each ingredient from user input.",
              "measurement": "Exact quantity for the final adjusted servings."
            }}
          ],
          "tags": "Comma-separated unique tags (e.g., breakfast, lunch, dinner, thanksgiving, holiday, vegan). Must include at least one meal category.",
          "instructions": [
            "Step 1: Detailed instruction.",
            "Step 2: Next step...",
            "...additional steps."
          ],
          "type_of_cuisine": "Cuisine type (e.g., Italian, Mexican), max 250 characters.",
          "nutrient_counts": [
            {{
              "name": "Nutrient name (e.g., calories, protein, carbohydrates, fats).",
              "measurement": "Exact amount per adjusted serving (e.g., 250 kcal, 20g protein). Calculated by dividing the total nutrient content by the number of servings."
            }}
          ],
          "serve_hot_or_cold": "Hot or Cold",
          "cooking_time": "Total cooking time in minutes (integer).",
          "serve_for": "Final adjusted number of servings (integer).",
          "difficulty": "Cooking difficulty: easy, medium, or hard.",
          "allergens": "List of allergens in the recipe (e.g., peanuts, soy, gluten). Max 250 characters.",
          "leftover_recommendations": [
            "Storage: Best way to store leftovers (e.g., refrigerate for 3 days, freeze for 1 month).",
            "Reuse: Suggestions for repurposing leftovers (e.g., turn into a stir-fry, use in sandwiches).",
            "Waste Reduction: Tips on minimizing waste (e.g., compost vegetable scraps, use bones for broth)."
          ]
        }}
      ]

      Ensure:
      - Instructions are clear and step-by-step.
      - The recipe precisely matches the user-provided ingredients.
      - Nutritional values and servings are accurately calculated based on the ingredients.
      - Nutrient counts are computed per serving using standard nutritional data for each ingredient.
      - Recipes are unique and varied.
      - Output must be in valid JSON format.
      - Each recipe's ingredient measurements correspond to the final adjusted serving size.

      Important:
      - Use proper JSON syntax for every object.
      - In the nutrient_counts section do not output:
        {{"name": "carbs": "approx 75g"}}
        Instead, output:
        {{"name": "carbs", "measurement": "approx 75g"}}
      - Output only the JSON and nothing else.
      - Don't give anything like notes on the end. Just then JSON.
    """
    response = model.generate_content(prompt)
    print(response)
    return response
